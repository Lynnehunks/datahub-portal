@using NRCan.Datahub.Metadata

<AeFlex Vertical="false">
    <!-- key -->
    <div class="metadata-key" style="width: 200px; margin: 2px; flex-grow: 1;">
        @if (HeaderRole)
        {
            <strong>Field</strong>
        }
        else
        {
            <div class="customuserinput" @onclick="SelectField">
                <label style="cursor: pointer;">@FieldLabel</label>
            </div>
        }
    </div>

    <!-- value -->
    <div class="metadata-value" style="width: 300px; margin: 2px; flex-grow: 1;">
        @if (HeaderRole)
        {
            <strong>Value</strong>
        }
        else
        {
            <div class="customuserinput">
                <input type="text"
                       @bind="BoundValue"
                       @ref="FieldValueInput"
                       style="@FieldStyle" />
            </div>
        }
    </div>

    <!-- button -->
    <div class="metadata-button" style="width: 30px; margin: 2px; flex-grow: 0;">
        @if (HeaderRole)
        {
            // leave empty
        }
        else
        {
            <div class="roundbutton" @onclick="ClearField">
                <i class="fal fa-trash-alt"></i>
            </div>
        }
    </div>
</AeFlex>

@code {

    [Parameter]
    public bool HeaderRole { get; set; }

    [Parameter]
    public FieldValue FieldValue { get; set; }

    [Parameter]
    public string FieldLabel { get; set; }

    [Parameter]
    public bool Mandatory { get; set; }

    [Parameter]
    public EventCallback<FieldValue> OnFieldChanged { get; set; }

    private ElementReference FieldValueInput;

    private string BoundValue
    {
        get => FieldValue.Value;
        set
        {
            if (value != FieldValue.Value)
            {
                FieldValue.Value = value;
                OnFieldChanged.InvokeAsync(FieldValue);
            }
        }
    }

    const string MandatoryField = "border: 0; width: 100%; background-color: rgb(255, 235, 230);";
    const string OptionalField = "border: 0; width: 100%;";

    private string FieldStyle => Mandatory ? MandatoryField : OptionalField;

    private void ClearField()
    {
        BoundValue = string.Empty;
        SelectField();
    }

    private async void SelectField()
    {
        await FieldValueInput.FocusAsync();
    }
}

